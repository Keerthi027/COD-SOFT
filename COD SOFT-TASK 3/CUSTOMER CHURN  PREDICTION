import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

file_path =(r"C:\Users\siva2\Downloads\archive (2).zip")


import os
if not os.path.exists(file_path):
    print(f"Error: File not found at {file_path}")
    exit()


data = pd.read_csv(file_path)


print(" First 5 Rows:\n", data.head())
print("\n Dataset Shape:", data.shape)
print("\n Column Names:", data.columns.tolist())


data.columns = data.columns.str.strip().str.lower()

if 'exited' not in data.columns:
    print("\n Error: 'exited' column not found in dataset.")
    print("Available columns:", data.columns.tolist())
    raise KeyError("'exited' column is missing. Please check the dataset.")
    

y = data['exited']  
X = data.drop(columns=['exited'])  



if data['exited'].dtype == 'object':
    data['exited'] = data['exited'].map({'Yes': 1, 'No': 0})


data = data.dropna()


label_encoders = {}
for col in data.select_dtypes(include=['object']).columns:
    label_encoders[col] = LabelEncoder()
    data[col] = label_encoders[col].fit_transform(data[col])


X = data.drop(columns=['exited'])
y = data['exited']


scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)
}


for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    
    print(f"\nðŸ”¹ {name} Accuracy: {acc:.4f}")
    print(classification_report(y_test, y_pred))
    sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
    plt.title(f"{name} - Confusion Matrix")
    plt.show()

